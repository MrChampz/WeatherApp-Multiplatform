apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.library'

android {
    compileSdkVersion(29)

    defaultConfig {
        minSdkVersion(21)
        targetSdkVersion(29)
    }

    // By default the android gradle plugin expects to find the kotlin source files in
    // the folder `main` and the test in the folder `test`. This is to be able place
    // the source code files inside androidMain and androidTest folders
    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
        test {
            java.srcDirs = ['src/androidTest/kotlin']
            res.srcDirs = ['src/androidTest/res']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')

        // Select iOS target for real device or emulator.
        final def iOSIsRealDevice = System.getenv('SDK_NAME')?.startsWith("iphoneos")
        final def iOSTarget = iOSIsRealDevice ? presets.iosArm64 : presets.iosX64

        // iOS target.
        fromPreset(iOSTarget, 'ios') {
            binaries { framework('common') }
        }
    }

    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'

            // Coroutines
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutinesVersion"

            // MVVM
            implementation "dev.icerock.moko:mvvm:$mokoMvvmVersion"

            // Serialization
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serializationVersion"

            // Kodein
            implementation "org.kodein.di:kodein-di-core:$kodeinVersion"
            implementation "org.kodein.di:kodein-di-erased:$kodeinVersion"

            // KTOR
            implementation "io.ktor:ktor-client-core:$ktorVersion"
            implementation "io.ktor:ktor-client-logging-native:$ktorVersion"

            //Klock
            implementation "com.soywiz.korlibs.klock:klock:$klockVersion"
        }

        androidMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"

            // Coroutines
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

            // MVVM
            implementation "androidx.lifecycle:lifecycle-extensions:$androidx_lifecycle_version"

            // Serialization
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializationVersion"

            // KTOR
            implementation "io.ktor:ktor-client-android:$ktorVersion"
        }

        iosMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"

            // Coroutines
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutinesVersion"

            // Serialization
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serializationVersion"

            // KTOR
            implementation "io.ktor:ktor-client-ios:$ktorVersion"
        }

        commonTest.dependencies {
            implementation kotlin('test-common')
            implementation kotlin('test-annotations-common')
            implementation "io.mockk:mockk:$mockkVersion"
        }
    }
}

// Task to generate iOS framework for xcode projects.
task packForXCode(type: Sync) {

    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("common", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

// Run packForXCode when building.
tasks.build.dependsOn packForXCode